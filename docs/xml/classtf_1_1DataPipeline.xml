<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtf_1_1DataPipeline" kind="class" language="C++" prot="public">
    <compoundname>tf::DataPipeline</compoundname>
    <innerclass refid="structtf_1_1DataPipeline_1_1Line" prot="private">tf::DataPipeline::Line</innerclass>
    <innerclass refid="structtf_1_1DataPipeline_1_1PipeMeta" prot="private">tf::DataPipeline::PipeMeta</innerclass>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Ps</declname>
        <defname>Ps</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtf_1_1DataPipeline_1af74864f0c0d05037bde2b913140fc6d7" prot="private" static="no">
        <type>unique_variant_t&lt; std::variant&lt; std::conditional_t&lt; std::is_void_v&lt; typename Ps::output_t &gt;, std::monostate, std::decay_t&lt; typename Ps::output_t &gt;&gt;... &gt;&gt;</type>
        <definition>using tf::DataPipeline&lt; Ps &gt;::variant_t =  unique_variant_t&lt;std::variant&lt;std::conditional_t&lt;std::is_void_v&lt;typename Ps::output_t&gt;, std::monostate, std::decay_t&lt;typename Ps::output_t&gt;&gt;...&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>variant_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="336" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1aceec74e44a0b6c2c7018844643da84fb" prot="private" static="no" mutable="no">
        <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref></type>
        <definition>Graph tf::DataPipeline&lt; Ps &gt;::_graph</definition>
        <argsstring></argsstring>
        <name>_graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="327" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1a4c4d77197be98821ad567db7e8d1cc61" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t tf::DataPipeline&lt; Ps &gt;::_num_tokens</definition>
        <argsstring></argsstring>
        <name>_num_tokens</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="329" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1a30a1c660df935da648be30743a6a3381" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/utility/tuple" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt; Ps... &gt;</type>
        <definition>std::tuple&lt;Ps...&gt; tf::DataPipeline&lt; Ps &gt;::_pipes</definition>
        <argsstring></argsstring>
        <name>_pipes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="331" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1ad7bb60a333fe6cde6c72c7599145a96c" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/array" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref>&lt; PipeMeta, sizeof...(Ps)&gt;</type>
        <definition>std::array&lt;PipeMeta, sizeof...(Ps)&gt; tf::DataPipeline&lt; Ps &gt;::_meta</definition>
        <argsstring></argsstring>
        <name>_meta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="332" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1aa8c8a3852f6a055e0666bd679b69a550" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/array" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array</ref>&lt; Line, sizeof...(Ps)&gt; &gt;</type>
        <definition>std::vector&lt;std::array&lt;Line, sizeof...(Ps)&gt; &gt; tf::DataPipeline&lt; Ps &gt;::_lines</definition>
        <argsstring></argsstring>
        <name>_lines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="333" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1ab8d93e0c228355590102a9bc1775b5fd" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classtf_1_1Task" kindref="compound">Task</ref> &gt;</type>
        <definition>std::vector&lt;Task&gt; tf::DataPipeline&lt; Ps &gt;::_tasks</definition>
        <argsstring></argsstring>
        <name>_tasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="334" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1ae78ad58672cd1a4307543957950d7819" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classtf_1_1Pipeflow" kindref="compound">Pipeflow</ref> &gt;</type>
        <definition>std::vector&lt;Pipeflow&gt; tf::DataPipeline&lt; Ps &gt;::_pipeflows</definition>
        <argsstring></argsstring>
        <name>_pipeflows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="335" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1DataPipeline_1ace745a0ccf8b5744fdea9caa93702eb8" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; padded_t&lt; variant_t &gt; &gt;</type>
        <definition>std::vector&lt;padded_t&lt;variant_t&gt; &gt; tf::DataPipeline&lt; Ps &gt;::_buffer</definition>
        <argsstring></argsstring>
        <name>_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="338" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1DataPipeline_1a531b390385a2517960d318043f2fede5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::DataPipeline&lt; Ps &gt;::DataPipeline</definition>
        <argsstring>(size_t num_lines, Ps &amp;&amp;...ps)</argsstring>
        <name>DataPipeline</name>
        <param>
          <type>size_t</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>Ps &amp;&amp;...</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>constructs a pipeline object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of parallel lines </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of pipes</para></parameterdescription>
</parameteritem>
</parameterlist>
Constructs a pipeline of up to <computeroutput>num_lines</computeroutput> parallel lines to schedule tokens through the given linear chain of pipes. The first pipe must define a serial direction (<ref refid="namespacetf_1abb7a11e41fd457f69e7ff45d4c769564a7b804a28d6154ab8007287532037f1d0" kindref="member">tf::PipeType::SERIAL</ref>) or an exception will be thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="267" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="349" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1abe9f09834e32eebf792c330fe825138d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::DataPipeline&lt; Ps &gt;::DataPipeline</definition>
        <argsstring>(size_t num_lines, std::tuple&lt; Ps... &gt; &amp;&amp;ps)</argsstring>
        <name>DataPipeline</name>
        <param>
          <type>size_t</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type><ref refid="cpp/utility/tuple" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt; Ps... &gt; &amp;&amp;</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>constructs a pipeline object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of parallel lines </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple of pipes</para></parameterdescription>
</parameteritem>
</parameterlist>
Constructs a pipeline of up to <computeroutput>num_lines</computeroutput> parallel lines to schedule tokens through the given linear chain of pipes. The first pipe must define a serial direction (<ref refid="namespacetf_1abb7a11e41fd457f69e7ff45d4c769564a7b804a28d6154ab8007287532037f1d0" kindref="member">tf::PipeType::SERIAL</ref>) or an exception will be thrown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="280" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="371" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1aaa74a52dac68155a9b73f5f70d9d14aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::DataPipeline&lt; Ps &gt;::num_lines</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_lines</name>
        <briefdescription>
<para>queries the number of parallel lines </para>        </briefdescription>
        <detaileddescription>
<para>The function returns the number of parallel lines given by the user upon the construction of the pipeline. The number of lines represents the maximum parallelism this pipeline can achieve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="290" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1a8720a404e3811b28e3dd5b98c9047496" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t tf::DataPipeline&lt; Ps &gt;::num_pipes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_pipes</name>
        <briefdescription>
<para>queries the number of pipes </para>        </briefdescription>
        <detaileddescription>
<para>The Function returns the number of pipes given by the user upon the construction of the pipeline. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="298" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1ad6355a117bbc4d3d607fb6f95ffd9889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::DataPipeline&lt; Ps &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>resets the pipeline </para>        </briefdescription>
        <detaileddescription>
<para>Resetting the pipeline to the initial state. After resetting a pipeline, its token identifier will start from zero as if the pipeline was just constructed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="307" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="426" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1a2c208032313105d142e2c8cec650acfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::DataPipeline&lt; Ps &gt;::num_tokens</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_tokens</name>
        <briefdescription>
<para>queries the number of generated tokens in the pipeline </para>        </briefdescription>
        <detaileddescription>
<para>The number represents the total scheduling tokens that has been generated by the pipeline so far. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="315" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="414" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1adfc70da6fdffc4a0a56bd2fe0f0dc07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
        <definition>Graph &amp; tf::DataPipeline&lt; Ps &gt;::graph</definition>
        <argsstring>()</argsstring>
        <name>graph</name>
        <briefdescription>
<para>obtains the graph object associated with the pipeline construct </para>        </briefdescription>
        <detaileddescription>
<para>This method is primarily used as an opaque data structure for creating a module task of the this pipeline. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="323" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="420" bodyend="422"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1DataPipeline_1a4550dd13483b3624648acda90d1e04f4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::DataPipeline&lt; Ps &gt;::_gen_meta</definition>
        <argsstring>(std::tuple&lt; Ps... &gt; &amp;&amp;, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>_gen_meta</name>
        <param>
          <type><ref refid="cpp/utility/tuple" kindref="compound" external="/home/xiongzc/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::tuple</ref>&lt; Ps... &gt; &amp;&amp;</type>
          <defname>ps</defname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="341" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="396" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1ad5836484403bf71a4082fc9a71393e86" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::DataPipeline&lt; Ps &gt;::_on_pipe</definition>
        <argsstring>(Pipeflow &amp;, Runtime &amp;)</argsstring>
        <name>_on_pipe</name>
        <param>
          <type><ref refid="classtf_1_1Pipeflow" kindref="compound">Pipeflow</ref> &amp;</type>
          <defname>pf</defname>
        </param>
        <param>
          <type><ref refid="classtf_1_1Runtime" kindref="compound">Runtime</ref> &amp;</type>
          <defname>rt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="343" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="458" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1DataPipeline_1a2820a8648648fbdb5f06220b5960f033" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::DataPipeline&lt; Ps &gt;::_build</definition>
        <argsstring>()</argsstring>
        <name>_build</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="344" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="496" bodyend="587"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" line="235" column="1" bodyfile="/home/xiongzc/taskflow/taskflow/algorithm/data_pipeline.hpp" bodystart="235" bodyend="345"/>
    <listofallmembers>
      <member refid="classtf_1_1DataPipeline_1ace745a0ccf8b5744fdea9caa93702eb8" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_buffer</name></member>
      <member refid="classtf_1_1DataPipeline_1a2820a8648648fbdb5f06220b5960f033" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_build</name></member>
      <member refid="classtf_1_1DataPipeline_1a4550dd13483b3624648acda90d1e04f4" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_gen_meta</name></member>
      <member refid="classtf_1_1DataPipeline_1aceec74e44a0b6c2c7018844643da84fb" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_graph</name></member>
      <member refid="classtf_1_1DataPipeline_1aa8c8a3852f6a055e0666bd679b69a550" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_lines</name></member>
      <member refid="classtf_1_1DataPipeline_1ad7bb60a333fe6cde6c72c7599145a96c" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_meta</name></member>
      <member refid="classtf_1_1DataPipeline_1a4c4d77197be98821ad567db7e8d1cc61" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_num_tokens</name></member>
      <member refid="classtf_1_1DataPipeline_1ad5836484403bf71a4082fc9a71393e86" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_on_pipe</name></member>
      <member refid="classtf_1_1DataPipeline_1ae78ad58672cd1a4307543957950d7819" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_pipeflows</name></member>
      <member refid="classtf_1_1DataPipeline_1a30a1c660df935da648be30743a6a3381" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_pipes</name></member>
      <member refid="classtf_1_1DataPipeline_1ab8d93e0c228355590102a9bc1775b5fd" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>_tasks</name></member>
      <member refid="classtf_1_1DataPipeline_1a531b390385a2517960d318043f2fede5" prot="public" virt="non-virtual"><scope>tf::DataPipeline</scope><name>DataPipeline</name></member>
      <member refid="classtf_1_1DataPipeline_1abe9f09834e32eebf792c330fe825138d" prot="public" virt="non-virtual"><scope>tf::DataPipeline</scope><name>DataPipeline</name></member>
      <member refid="classtf_1_1DataPipeline_1adfc70da6fdffc4a0a56bd2fe0f0dc07d" prot="public" virt="non-virtual"><scope>tf::DataPipeline</scope><name>graph</name></member>
      <member refid="classtf_1_1DataPipeline_1aaa74a52dac68155a9b73f5f70d9d14aa" prot="public" virt="non-virtual"><scope>tf::DataPipeline</scope><name>num_lines</name></member>
      <member refid="classtf_1_1DataPipeline_1a8720a404e3811b28e3dd5b98c9047496" prot="public" virt="non-virtual"><scope>tf::DataPipeline</scope><name>num_pipes</name></member>
      <member refid="classtf_1_1DataPipeline_1a2c208032313105d142e2c8cec650acfe" prot="public" virt="non-virtual"><scope>tf::DataPipeline</scope><name>num_tokens</name></member>
      <member refid="classtf_1_1DataPipeline_1ad6355a117bbc4d3d607fb6f95ffd9889" prot="public" virt="non-virtual"><scope>tf::DataPipeline</scope><name>reset</name></member>
      <member refid="classtf_1_1DataPipeline_1af74864f0c0d05037bde2b913140fc6d7" prot="private" virt="non-virtual"><scope>tf::DataPipeline</scope><name>variant_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
